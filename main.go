// package main

// import (
// 	"encoding/json"
// 	"fmt"
// 	"io"
// 	"log"
// 	"net/http"

// 	"github.com/gorilla/mux"
// )

// func main() {
// 	r := mux.NewRouter()
// 	r.HandleFunc("/fizzbuzz/{number}", fizzbuzzHandler)

// 	log.Fatal(http.ListenAndServe(":8080", r))
// }

// func fizzbuzzHandler(w http.ResponseWriter, r *http.Request) {
// 	vars := mux.Vars(r)

// 	m := map[string]string{
// 		"messages": vars["number"],
// 	}
// 	b, err := json.Marshal(&m)
// 	if err != nil {
// 		w.Header().Set("Content-Type", "application/json")
// 		w.WriteHeader(http.StatusInternalServerError)
// 		io.WriteString(w, fmt.Sprintf(`{"message": "%s"}`, err))
// 	}

// 	w.Header().Set("Content-Type", "application/json")
// 	w.WriteHeader(http.StatusOK)
// 	io.WriteString(w, string(b))
// }

package main

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/mynameismaxz/basic_golang/fizzbuzz"
)

// Generated by https://quicktype.io

type Response struct {
	Number string `json:"number" xml:"number"`
	Result string `json:"result" xml:"result"`
}

type Users []User

type User struct {
	ID       int64   `json:"id"`
	Name     string  `json:"name"`
	Username string  `json:"username"`
	Email    string  `json:"email"`
	Address  Address `json:"address"`
	Phone    string  `json:"phone"`
	Website  string  `json:"website"`
	Company  Company `json:"company"`
}

type Address struct {
	Street  string `json:"street"`
	Suite   string `json:"suite"`
	City    string `json:"city"`
	Zipcode string `json:"zipcode"`
	Geo     Geo    `json:"geo"`
}

type Geo struct {
	Lat string `json:"lat"`
	Lng string `json:"lng"`
}

type Company struct {
	Name        string `json:"name"`
	CatchPhrase string `json:"catchPhrase"`
	Bs          string `json:"bs"`
}

func main() {
	r := gin.Default()

	r.POST("/users", usersHandler)
	r.GET("/fizzbuzz/:number", func(c *gin.Context) {
		output_number := c.Param("number")
		n, err := strconv.Atoi(output_number)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"message": err.Error(),
			})
			return
		}

		c.JSON(http.StatusOK, Response{
			Number: output_number,
			Result: fizzbuzz.FizzBuzz(n),
		})
	})
	r.Run() // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}

func usersHandler(c *gin.Context) {
	var users Users
	err := c.Bind(&users)
	if err != nil {
		c.JSON(http.StatusBadGateway, gin.H{
			"message": err.Error(),
		})
		return
	}

	c.XML(http.StatusOK, users)
}
